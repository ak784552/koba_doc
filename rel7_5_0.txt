coal 7.5.0の機能改善およびバグｆｉｘ
********************************
*         機 能 改 善          *
********************************
<2025.03.24>
(1)有理数をサポートした。
   --> makefile, cl_cmpt_rational.c, cl_cmpt_math.c, cl_gx_func_bexp.c, clprdeftype.c,
       cltrbexp.c, cl_conv_const_n.c, clconst.h

<2025.03.25>
(2)m_is_mpa1(), m_mod2()を追加した。
   --> akxmpa.c, akxlib.h

<2025.03.26>
(3)akxg_sosu_next(), akxg_sosu_next_tbl()を追加した
   --> akxgmath.c, akxlib.h

<2025.04.12>
(4)_b_search_mpa(), akxg_sosu_over_by_tbl(), akxg_sosu_chk_mpa_by_tbl(),akxg_sosu_next_mpa_tbl(),
   akxg_sosu_next_mpa(), akxg_sosu_over_mpa_by_tbl()を追加した
   --> akxgmath.c, akxlib.h

<2025.05.10>
(5)_cvl()のオーバーフローチェックに、INTベースオプションを追加した。
   -->akxconvn.c, cl_conv_const_n.c

<2025.XX.XX>
(6)
   -->

********************************
*           Bug fix            *
********************************
<2025.03.26>
(1)3.5r/10が、「１０進小数点数[3.5r]の指定が誤っています(rc=-15)。」となる。
   [原因]atrが2と4のときは、ULIRを返しているが、3.5のときは、atr=8となっているため、
         UILRが返っていない。
   [措置]atr=8でもULIRを返すようにした。
   --> akxconv.c

<2025.04.10>
(2)a=32767.0;b=16384.0;a/b が 1.0... になる。
   [原因]1桁目を処理した後、a=16383.0で、anm=163 bnm=163 となっているため、anmが16383にならず、
         また、d=1となるため、md[d]がそのまま使われ、正しい引き算になっていなかった。
   [措置]anm=bnmでもanmが16383になるようにし、d=100(RADIX)のときは、d=99(RADIX-1)とするようにした。
   --> akxmpa.c

<2025.04.23>
(3){}の形式の関数を実行したとき、retvalに設定してあるpInfoParmWの内容がRETURN時に不正になる。
   [原因]pInfoParmWはオート変数を使っているため、関数実行でnodeに戻る場合、エリアが失われてしまう。
         {}形式でないときは、pInfoParmWをmallocしたものに置き換えているため、エリアが失われることはない。
   [措置]{}の形式かどうかの判別をやめ、pInfoParmWをmallocしたものに置き換える処理を関数化した上で、
         ユーザ定義関数を実行するときのみ、この関数を呼ぶようにした。
         なお、cl_gx_func_method()の中では、pInfoParmW->pi_idに'F'をセットし、このときのみ、
         上記関数を実行するようにした。
      /************ retvalは関数からreturnするときのみ使用するため、これは必要ない気がする
         また、上記関数では、pInfoParmWのエリア用に"$関数名"の変数を作成しているが、この変数の
         後ろに通番を付けるようにした。これは、一つの式の中で同じ関数が呼ばれても、pInfoParmWの
         エリアが同じにならないようにするためである。
       ************/
   --> cl_gx_func_bexp.c, cl_execute_proc.c

<2025.05.12>
(4)オプション20で仮数桁数とゼロサプレスを指定してもdouble型のときは、0.0がゼロサプレスされない。
   [原因]仮数桁数が指定なしでゼロサプレス指定があるとき、0.0を"0.0"としている。
   [措置]ゼロサプレス指定があるときは、0.0を"0.0"とするようにした。
   --> cl_cmpt_string.c

<2025.05.14>
(5)coal_clasicで、test_math.clを実行すると、print "30 ** 9" が、"演算子30が誤っている"の
   エラーになる。
   [原因]パラメータが1つのときは、cl_getitems()を使って、項目に分解しているが、項目データを
         格納するエリアworkの長さをパラメータ長(len)+1にしている。
         cl_getitems()では、項目データをnull終端にして、workに詰めている。このとき、akxtgwnsl()、
         この中で呼んでいるakxwdmax_chkm()を使って、項目の分解とworkへの設定を行っている。
         このケースでは、"9"を取りに行ったときには、akxwdmax_chkm()の引数は、lmax=1,l=0,m=1で
         エリアが足りているかの判定を"(l<lmax-m)"としているため、"9"が設定されていない。
         結果として項目数が２となり、30が単項演算子と見なされエラーとなった。
   [措置]akxwdmax_chkm()判定を"(l+m <= lmax)"とした。akxwdmax_chk()、akxwdmax_chk2()も同様に修正。
   --> akxgetstpl.c

<2025.XX.XX>
(6)
   [原因]
   [措置]
   --> 
